/*
 * StartPage.java
 *
 * Created on 20 de Fevereiro de 2003, 02:27
 */
package com.oktiva.mogno.studio;

import com.oktiva.mogno.Application;
import com.oktiva.mogno.TopLevel;
import com.oktiva.mogno.html.Input;
import com.oktiva.mogno.html.Option;
import com.oktiva.mogno.html.P;
import com.oktiva.mogno.html.Radiogroup;
import com.oktiva.mogno.html.Select;
import com.oktiva.mogno.studio.MognoStudioPage;
import com.oktiva.util.FileUtil;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Vector;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;

/**
 * @version $Id$
 */
public class StartPage extends MognoStudioPage {
	static Logger logger = Logger.getLogger(StartPage.class.getName());
	public void onCreatePage(StartPage page)
	throws Exception {
		logger.debug("ON CREATE PAGE StartPage");
		String rootDir = application.getRootDir();
		File dir = new File(rootDir+"/WEB-INF/work");
		if (dir.exists() && (!dir.isDirectory() || !dir.canWrite())) {
			throw new IOException("Can't write to '"+dir.getCanonicalPath()+"'");
		} else if (!dir.exists()) {
			dir.mkdir();
		}
		HttpSession session = application.getSession();
		session.setAttribute("workDir", dir.getCanonicalPath());
		logger.debug("listing applications...");
		Vector apps = listApplications(dir);
		Collections.sort(apps);
		for (int i=0; i<apps.size(); i++) {
			String appName = (String)apps.get(i);
			Option o = new Option();
			o.setName(appName);
			o.setValue(appName);
			o.setLabel(appName);
			o.setContent(appName);
			o.setParent("existingApp");
			o.setSelect("existingApp");
			o.setTop(i);
			page.registerChild(o);
		}
	}
	private Vector listApplications(File dir)
	throws IOException {
		Vector v = new Vector();
		File[] subs = dir.listFiles();
		for (int i=0; i<subs.length; i++) {
			if (subs[i].isDirectory()) {
				File sub = new File(subs[i].getCanonicalPath()+"/WEB-INF/xml/MognoApplication.xml");
				if (sub.exists()) {
					v.add(subs[i].getName());
				}
			}
		}
		return v;
	}
	/** Verify if the action is createApp or openApp and do the right thing.
	 *action
	 *createApp -> newApp
	 *openApp -> existingApp
	 */
	public void onGoButtonClicked(Input go)
	throws Exception {
		boolean ok = true;
		Radiogroup action = (Radiogroup)getChild("action");
		if ("createApp".equals(action.value)) {
			ok = createApp();
		} else if ("openApp".equals(action.value)) {
			ok = openApp();
		} else {
			throw new Exception("Unknown action '"+action.value+"'.");
		}
		if (ok) {
			showPage("ApplicationPage");
		} else {
			application.outHtml(show());
		}
	}
	private boolean createApp()
	throws Exception {
		HttpSession session = application.getSession();
		Input newApp = (Input)getChild("newApp");
		if (newApp == null || newApp.value == null || newApp.value.equals("")) {
			P p = (P)getChild("error");
			p.setContent("New application name not found.");
			return false;
		}
		// criar dir
		String bar = File.separator;
		File dir = new File(session.getAttribute("workDir")+bar+newApp.value);
		if (dir.exists()) {
			P p = (P)getChild("error");
			p.setContent("Application directory already exists.");
			return false;
		}
		dir.mkdir();
		File xmlDir = new File(dir, "WEB-INF"+bar+"xml");
		xmlDir.mkdirs();
		String xmlSkel = "<?xml version=\"1.0\" standalone=\"yes\"?>\n" +
				"<!-- Mogno Application XML - Generated by Mogno Studio -->\n" +
				"<MognoApplication xmlns=\"http://www.oktiva.com.br/mogno\" " +
				"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
				"xsi:schemaLocation=\"http://www.oktiva.com.br/mogno\n" +
				"Application.xsd\">\n" +
				"<TopLevel name=\"page1\" class=\"com.oktiva.mogno.html.Page\"/>\n" +
				"<DefaultTopLevel name=\"page1\"/>\n" +
				"</MognoApplication>\n";
		File xmlFile = new File(xmlDir, "MognoApplication.xml");
		logger.debug("Writing file '"+xmlFile.getCanonicalPath()+"'");
		FileUtil.writeFile(xmlSkel, xmlFile);
		session.setAttribute("application", newApp.value);
		return true;
	}
	private boolean openApp()
	throws Exception {
		Select existingApp = (Select)getChild("existingApp");
		if (existingApp == null || existingApp.values == null || existingApp.values.size()<1) {
			P p = (P)getChild("error");
			p.setContent("Existing application not selected.");
			return false;
		}
		String appName = (String)existingApp.values.get(0);
		if (appName == null || appName.equals("")) {
			P p = (P)getChild("error");
			p.setContent("Application name not found.");
			return false;
		} else {
			HttpSession session = application.getSession();
			session.setAttribute("application", appName);
		}
		return true;
	}
}
